least-common-multiple-euclidian-branch




function smallestCommons(arr) {
    let range = [];//range of numbers to be divisible by final output
    let max = 0;// biggest number in the range
    if (arr[0]>arr[1]){
      range.push(arr[1]);
      max = arr[0];
    }else if(arr[1]>arr[0]){
      range.push(arr[0]);
      max = arr[1];
    }else{return arr[0]}// arrange the input values low -> high; or return first number if they are the same
    for(let i=range[0]+1; i<=max; i++){
      range.push(i);
    }// populate range array; these numbers will be factored next
  function gcf(x,y){
      if ((x===0) || (y===0)){
          return (x > y) ? x : y;
      }else{
          return gcf(y, x % y);
      }
  }
  function lcm(x,y){
      return (x * y)/gcf(x,y);
  }
  console.log(range.reduce(lcm));
  return range.reduce(lcm);
}
smallestCommons([23,18]);
